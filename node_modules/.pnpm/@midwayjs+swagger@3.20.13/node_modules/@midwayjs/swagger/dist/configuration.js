"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwaggerConfiguration = void 0;
const core_1 = require("@midwayjs/core");
const _1 = require(".");
const DefaultConfig = require("./config/config.default");
let SwaggerConfiguration = class SwaggerConfiguration {
    async onReady(container) {
        const apps = this.applicationManager.getApplications([
            'express',
            'koa',
            'egg',
            'faas',
        ]);
        if (apps.length) {
            const explorer = await container.getAsync(_1.SwaggerExplorer);
            explorer.scanApp();
            // 添加统一前缀
            let globalPrefix = this.configService.getConfiguration('globalPrefix') ||
                this.configService.getConfiguration('koa.globalPrefix') ||
                this.configService.getConfiguration('express.globalPrefix') ||
                this.configService.getConfiguration('egg.globalPrefix');
            if (globalPrefix) {
                if (!/^\//.test(globalPrefix)) {
                    globalPrefix = '/' + globalPrefix;
                }
                explorer.addGlobalPrefix(globalPrefix);
            }
            apps.forEach(app => {
                app.useMiddleware(_1.SwaggerMiddleware);
            });
        }
    }
};
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", core_1.MidwayApplicationManager)
], SwaggerConfiguration.prototype, "applicationManager", void 0);
__decorate([
    (0, core_1.Inject)(),
    __metadata("design:type", core_1.MidwayConfigService)
], SwaggerConfiguration.prototype, "configService", void 0);
SwaggerConfiguration = __decorate([
    (0, core_1.Configuration)({
        importConfigs: [
            {
                default: DefaultConfig,
            },
        ],
        namespace: 'swagger',
    })
], SwaggerConfiguration);
exports.SwaggerConfiguration = SwaggerConfiguration;
//# sourceMappingURL=configuration.js.map