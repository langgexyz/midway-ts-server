"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderSwaggerUIRemote = exports.renderJSON = exports.renderSwaggerUIDist = void 0;
const core_1 = require("@midwayjs/core");
const fs_1 = require("fs");
const path_1 = require("path");
function renderSwaggerUIDist(swaggerConfig, swaggerExplorer) {
    const { getAbsoluteFSPath } = (0, core_1.safeRequire)('swagger-ui-dist');
    if (!getAbsoluteFSPath) {
        throw new core_1.MidwayCommonError('swagger-ui-dist is not installed');
    }
    const swaggerRenderOptions = swaggerConfig.swaggerUIRenderOptions || {};
    if (swaggerRenderOptions.customInitializer) {
        if ((0, path_1.isAbsolute)(swaggerRenderOptions.customInitializer)) {
            swaggerRenderOptions.customInitializer = (0, fs_1.readFileSync)(swaggerRenderOptions.customInitializer);
        }
        else {
            throw new core_1.MidwayInvalidConfigPropertyError('swagger.swaggerRenderOptions.customInitializer', ['Buffer', 'String']);
        }
    }
    function replaceInfo(content) {
        let str = `location.href.replace('${swaggerConfig.swaggerPath}/index.html', '${swaggerConfig.swaggerPath}/index.json'),\n validatorUrl: null,`;
        if (swaggerConfig.displayOptions) {
            Object.keys(swaggerConfig.displayOptions).forEach(key => {
                str += `\n${key}: ${swaggerConfig.displayOptions[key]},`;
            });
        }
        return content.replace('"https://petstore.swagger.io/v2/swagger.json",', str);
    }
    const swaggerUiAssetPath = getAbsoluteFSPath();
    return async (pathname) => {
        if (!swaggerUiAssetPath ||
            pathname.indexOf(swaggerConfig.swaggerPath) === -1) {
            return;
        }
        const arr = pathname.split('/');
        let lastName = arr.pop();
        if (lastName === 'index.json') {
            return { ext: 'json', content: swaggerExplorer.getData() };
        }
        if (!lastName) {
            lastName = 'index.html';
        }
        let content = (0, fs_1.readFileSync)((0, path_1.join)(swaggerUiAssetPath, lastName));
        if (lastName === 'swagger-initializer.js' &&
            (swaggerRenderOptions === null || swaggerRenderOptions === void 0 ? void 0 : swaggerRenderOptions.customInitializer)) {
            return { ext: 'js', content: swaggerRenderOptions.customInitializer };
        }
        if (lastName === 'index.html' || lastName === 'swagger-initializer.js') {
            content = content.toString('utf8');
            content = replaceInfo(content);
        }
        const ext = (0, path_1.extname)(lastName);
        return { ext, content };
    };
}
exports.renderSwaggerUIDist = renderSwaggerUIDist;
function renderJSON(swaggerConfig, swaggerExplorer) {
    return async (pathname) => {
        if (pathname.indexOf(swaggerConfig.swaggerPath) === -1) {
            return;
        }
        const arr = pathname.split('/');
        const lastName = arr.pop();
        if (lastName === 'index.json') {
            return { ext: 'json', content: swaggerExplorer.getData() };
        }
        return;
    };
}
exports.renderJSON = renderJSON;
function renderSwaggerUIRemote(swaggerConfig, swaggerExplorer) {
    const swaggerRenderOptions = swaggerConfig.swaggerUIRenderOptions || {};
    const indexPagePath = (swaggerRenderOptions === null || swaggerRenderOptions === void 0 ? void 0 : swaggerRenderOptions.indexPagePath) || (0, path_1.join)(__dirname, '../../index.html');
    return async (pathname) => {
        if (pathname.indexOf(swaggerConfig.swaggerPath) === -1) {
            return;
        }
        const arr = pathname.split('/');
        let lastName = arr.pop();
        if (lastName === 'index.json') {
            return { ext: 'json', content: swaggerExplorer.getData() };
        }
        if (!lastName) {
            lastName = 'index.html';
        }
        if (lastName === 'index.html') {
            const content = (0, fs_1.readFileSync)(indexPagePath, 'utf8');
            return { ext: 'html', content };
        }
        return;
    };
}
exports.renderSwaggerUIRemote = renderSwaggerUIRemote;
//# sourceMappingURL=render.js.map