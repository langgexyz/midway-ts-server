import type { Type } from '../interfaces';
export declare function createPropertyDecorator<T extends Record<string, any> = any>(metakey: string, metadata: T): PropertyDecorator;
export declare function createMixedDecorator<T = any>(metakey: string, metadata: T): ClassDecorator & MethodDecorator;
export declare function createParamDecorator<T extends Record<string, any> = any>(metadata: T, initial: Partial<T>): MethodDecorator;
export declare function getTypeIsArrayTuple(input: Type | undefined | string | Record<string, any>, isArrayFlag: boolean): [Type | undefined | string | Record<string, any>, boolean];
export declare function getSchemaPath(clzz: Type | string): string;
//# sourceMappingURL=helpers.d.ts.map