"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSchemaPath = exports.getTypeIsArrayTuple = exports.createParamDecorator = exports.createMixedDecorator = exports.createPropertyDecorator = void 0;
const core_1 = require("@midwayjs/core");
const constants_1 = require("../constants");
function createPropertyDecorator(metakey, metadata) {
    return (0, core_1.createCustomPropertyDecorator)(metakey, metadata, false);
}
exports.createPropertyDecorator = createPropertyDecorator;
function createMixedDecorator(metakey, metadata) {
    return (target, methodName) => {
        if (methodName) {
            (0, core_1.attachPropertyDataToClass)(constants_1.DECORATORS_METHOD_METADATA, {
                key: metakey,
                propertyName: methodName,
                metadata,
            }, target, methodName);
        }
        else {
            (0, core_1.attachClassMetadata)(constants_1.DECORATORS_CLASS_METADATA, {
                key: metakey,
                metadata,
            }, target);
        }
    };
}
exports.createMixedDecorator = createMixedDecorator;
function createParamDecorator(metadata, initial) {
    return createMixedDecorator(constants_1.DECORATORS.API_PARAMETERS, {
        ...initial,
        ...metadata,
    });
}
exports.createParamDecorator = createParamDecorator;
function getTypeIsArrayTuple(input, isArrayFlag) {
    if (!input) {
        return [input, isArrayFlag];
    }
    if (isArrayFlag) {
        return [input, isArrayFlag];
    }
    const isInputArray = Array.isArray(input);
    const type = isInputArray ? input[0] : input;
    return [type, isInputArray];
}
exports.getTypeIsArrayTuple = getTypeIsArrayTuple;
function getSchemaPath(clzz) {
    let str = clzz;
    if (typeof clzz !== 'string') {
        str = clzz ? clzz.name : clzz;
    }
    return `#/components/schemas/${str}`;
}
exports.getSchemaPath = getSchemaPath;
//# sourceMappingURL=helpers.js.map