"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiDefaultResponse = exports.ApiUnsupportedMediaTypeResponse = exports.ApiUnprocessableEntityResponse = exports.ApiServiceUnavailableResponse = exports.ApiRequestTimeoutResponse = exports.ApiPayloadTooLargeResponse = exports.ApiPreconditionFailedResponse = exports.ApiNotImplementedResponse = exports.ApiNotAcceptableResponse = exports.ApiMethodNotAllowedResponse = exports.ApiGoneResponse = exports.ApiGatewayTimeoutResponse = exports.ApiForbiddenResponse = exports.ApiConflictResponse = exports.ApiBadGatewayResponse = exports.ApiInternalServerErrorResponse = exports.ApiNotFoundResponse = exports.ApiTooManyRequestsResponse = exports.ApiUnauthorizedResponse = exports.ApiBadRequestResponse = exports.ApiFoundResponse = exports.ApiMovedPermanentlyResponse = exports.ApiNoContentResponse = exports.ApiAcceptedResponse = exports.ApiCreatedResponse = exports.ApiOkResponse = exports.ApiResponse = void 0;
const constants_1 = require("../constants");
const helpers_1 = require("./helpers");
const httpStatus_1 = require("../common/httpStatus");
function ApiResponse(options) {
    const [type, isArray] = (0, helpers_1.getTypeIsArrayTuple)(options.type, options.isArray);
    options.type = type;
    options.isArray = isArray;
    options.description = options.description ? options.description : '';
    const groupedMetadata = {
        [options.status || 'default']: options,
    };
    return (0, helpers_1.createMixedDecorator)(constants_1.DECORATORS.API_RESPONSE, groupedMetadata);
}
exports.ApiResponse = ApiResponse;
const ApiOkResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.OK,
});
exports.ApiOkResponse = ApiOkResponse;
const ApiCreatedResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.CREATED,
});
exports.ApiCreatedResponse = ApiCreatedResponse;
const ApiAcceptedResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.ACCEPTED,
});
exports.ApiAcceptedResponse = ApiAcceptedResponse;
const ApiNoContentResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.NO_CONTENT,
});
exports.ApiNoContentResponse = ApiNoContentResponse;
const ApiMovedPermanentlyResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.MOVED_PERMANENTLY,
});
exports.ApiMovedPermanentlyResponse = ApiMovedPermanentlyResponse;
const ApiFoundResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.FOUND,
});
exports.ApiFoundResponse = ApiFoundResponse;
const ApiBadRequestResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.BAD_REQUEST,
});
exports.ApiBadRequestResponse = ApiBadRequestResponse;
const ApiUnauthorizedResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.UNAUTHORIZED,
});
exports.ApiUnauthorizedResponse = ApiUnauthorizedResponse;
const ApiTooManyRequestsResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.TOO_MANY_REQUESTS,
});
exports.ApiTooManyRequestsResponse = ApiTooManyRequestsResponse;
const ApiNotFoundResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.NOT_FOUND,
});
exports.ApiNotFoundResponse = ApiNotFoundResponse;
const ApiInternalServerErrorResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.INTERNAL_SERVER_ERROR,
});
exports.ApiInternalServerErrorResponse = ApiInternalServerErrorResponse;
const ApiBadGatewayResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.BAD_GATEWAY,
});
exports.ApiBadGatewayResponse = ApiBadGatewayResponse;
const ApiConflictResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.CONFLICT,
});
exports.ApiConflictResponse = ApiConflictResponse;
const ApiForbiddenResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.FORBIDDEN,
});
exports.ApiForbiddenResponse = ApiForbiddenResponse;
const ApiGatewayTimeoutResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.GATEWAY_TIMEOUT,
});
exports.ApiGatewayTimeoutResponse = ApiGatewayTimeoutResponse;
const ApiGoneResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.GONE,
});
exports.ApiGoneResponse = ApiGoneResponse;
const ApiMethodNotAllowedResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.METHOD_NOT_ALLOWED,
});
exports.ApiMethodNotAllowedResponse = ApiMethodNotAllowedResponse;
const ApiNotAcceptableResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.NOT_ACCEPTABLE,
});
exports.ApiNotAcceptableResponse = ApiNotAcceptableResponse;
const ApiNotImplementedResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.NOT_IMPLEMENTED,
});
exports.ApiNotImplementedResponse = ApiNotImplementedResponse;
const ApiPreconditionFailedResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.PRECONDITION_FAILED,
});
exports.ApiPreconditionFailedResponse = ApiPreconditionFailedResponse;
const ApiPayloadTooLargeResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.PAYLOAD_TOO_LARGE,
});
exports.ApiPayloadTooLargeResponse = ApiPayloadTooLargeResponse;
const ApiRequestTimeoutResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.REQUEST_TIMEOUT,
});
exports.ApiRequestTimeoutResponse = ApiRequestTimeoutResponse;
const ApiServiceUnavailableResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.SERVICE_UNAVAILABLE,
});
exports.ApiServiceUnavailableResponse = ApiServiceUnavailableResponse;
const ApiUnprocessableEntityResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.UNPROCESSABLE_ENTITY,
});
exports.ApiUnprocessableEntityResponse = ApiUnprocessableEntityResponse;
const ApiUnsupportedMediaTypeResponse = (options = {}) => ApiResponse({
    ...options,
    status: httpStatus_1.HttpStatus.UNSUPPORTED_MEDIA_TYPE,
});
exports.ApiUnsupportedMediaTypeResponse = ApiUnsupportedMediaTypeResponse;
const ApiDefaultResponse = (options = {}) => ApiResponse({
    ...options,
    status: 'default',
});
exports.ApiDefaultResponse = ApiDefaultResponse;
//# sourceMappingURL=api-response.decorator.js.map